name: backend

on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  backend:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build jar and image
        run: |
          cd backend
          echo Building jar
          ./build.sh
          docker compose build

      - name: Check image
        id: check-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          cd backend
          export ECR_REGISTRY
          for file in $(ls -d */); do
            file=${file%%/}
            echo Comparing $file
            if ! ./hashcheck.sh $file; then
              EXPORT_IMAGES="$EXPORT_IMAGES $file"
            fi
          done
          echo "EXPORT_IMAGES=$EXPORT_IMAGES" >> "$GITHUB_OUTPUT"

      - name: Export images to Amazon
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          EXPORT_IMAGES: ${{ steps.check-image.outputs.EXPORT_IMAGES }}
        run: |
          cd backend
          echo "All images to push: ${EXPORT_IMAGES}"
          for image in ${EXPORT_IMAGES}; do
            echo "Uploading ${image}"
            tag=$(docker images $image --format "{{.Tag}}")
            repourl=$ECR_REGISTRY/$image
            echo "repourl=${repourl}"
            docker tag $image:$tag $repourl
            echo "docker push $repourl"
            #docker push $repourl
            docker rmi $image:$tag $repourl
            echo "Removed images ${image}:${tag} and ${repourl}"
          done
