services:
  token:
    build:
      context: token-service
      dockerfile: ../Dockerfile
    image: token-service
    container_name: ${TOKEN_HOST}
    ports:
      - '${TOKEN_PORTS}'
  bookmark:
    build:
      context: bookmarks-service
      dockerfile: ../Dockerfile
    image: bookmark
    container_name: ${BOOKMARK_HOST}
    depends_on:
      - bookmark-db
      - token
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://${BOOKMARK_DB}:5432/bookmarks
      - SPRING_DATASOURCE_USERNAME=bmks
      - SPRING_DATASOURCE_PASSWORD=skram
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
      - TOKEN_HOST=${TOKEN_HOST}
    ports:
      - '${BOOKMARK_PORTS}'
  event:
    build:
      context: event-service
      dockerfile: ../Dockerfile
    image: event-service
    container_name: ${EVENT_HOST}
    depends_on:
      - ${EVENT_DB}
    environment:
      - SPRING_DATA_MONGODB_AUTHENTICATION_DATABASE=event
      - SPRING_DATA_MONGODB_URI=mongodb://${MONGO_USER}:${MONGO_PASSWORD}@${EVENT_DB}:27017/?retryWrites=true&w=majority
      - SPRING_DATA_MONGODB_DATABASE=event
    ports:
      - '${EVENT_PORTS}'
  ticket:
    build:
      context: ticket-service
      dockerfile: ../Dockerfile
    image: ticket-service
    container_name: ${TICKET_HOST}
    depends_on:
      - ${TICKET_DB}
    environment:
      - SPRING_DATA_MONGODB_AUTHENTICATION_DATABASE=ticket
      - SPRING_DATA_MONGODB_URI=mongodb://${MONGO_USER}:${MONGO_PASSWORD}@${TICKET_DB}:27017/?retryWrites=true&w=majority
      - SPRING_DATA_MONGODB_DATABASE=ticket
    ports:
      - '${TICKET_PORTS}'
  session:
    build:
      context: session-service
      dockerfile: ../Dockerfile
    image: session-service
    container_name: ${SESSION_HOST}
    depends_on:
      token:
        condition: service_started
      redis-cluster:
        condition: service_completed_successfully
    ports:
      - "8085:8085"
    environment:
      - REDIS_HOST=${REDIS_HOST}
      - TOKEN_HOST=${TOKEN_HOST}
      - TOKEN_PORT=${TOKEN_PORT}
  redis-node-1:
    image: redis
    container_name: node-1
    command: bash -c "${redis_command}"
    ports:
      - '7001:6379'
  redis-node-2:
    image: redis
    container_name: node-2
    command: bash -c "${redis_command}"
    ports:
      - '7002:6379'
  redis-node-3:
    image: redis
    container_name: node-3
    command: bash -c "${redis_command}"
    ports:
      - '7003:6379'
  redis-node-4:
    image: redis
    container_name: node-4
    command: bash -c "${redis_command}"
    ports:
      - '7004:6379'
  redis-node-5:
    image: redis
    container_name: node-5
    command: bash -c "${redis_command}"
    ports:
      - '7005:6379'
  redis-node-6:
    image: redis
    container_name: node-6
    command: bash -c "${redis_command}"
    ports:
      - '7006:6379'
  redis-cluster:
    container_name: redis
    image: "redis"
    ports:
      - "6379:6379"
    command: bash -c "echo yes | redis-cli --cluster create node-1:6379 node-2:6379 node-3:6379 node-4:6379 node-5:6379 node-6:6379 --cluster-replicas 1; sleep 5"
    depends_on:
      - redis-node-1
      - redis-node-2
      - redis-node-3
      - redis-node-4
      - redis-node-5
      - redis-node-6
    volumes:
      - redis_db:/data
  event-db:
    image: mongo
    container_name: ${EVENT_DB}
    environment:
      - MONGO_INITDB_ROOT_DB=event
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD}
    ports:
      - '27017:27017'
    volumes:
      - event_db:/data/db
  ticket-db:
    image: mongo
    container_name: ${TICKET_DB}
    environment:
      - MONGO_INITDB_ROOT_DB=ticket
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD}
    ports:
      - '27017:27017'
    volumes:
      - ticket_db:/data/db
  bookmark-db:
    image: 'postgres:15-alpine'
    container_name: ${BOOKMARK_DB}
    environment:
      - POSTGRES_DB=bookmarks
      - POSTGRES_USER=bmks
      - POSTGRES_PASSWORD=skram
    volumes:
      - bookmark_db:/var/lib/postgresql/data
volumes:
  bookmark_db:
  redis_db:
  event_db:
  ticket_db:
